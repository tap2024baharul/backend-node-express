name: CI/CD for TypeScript App

on:
  push:
    branches:
      - develop
  pull_request:
      types: [closed]
      branches: [develop]


jobs:
  build-for-develop-branch:
    name: Build, Test, Push to ECR, and Trivy Scan 
    runs-on: ubuntu-latest
    env:
      # BRANCH_NAME: ${{ github.head_ref || github.ref_name }}     
      ECR_REGION: ap-south-1
      ECR_REPOSITORY: ${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}
      ASM_NAME: ${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}
      ECR_REPO_NAME: ${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}
      IMAGE_TAG: ${{ github.sha }}    
    environment: tapper

    steps:
    - name: Extract branch name
      id: extract_branch
      run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
              
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set up Node.js environment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Installing Bash dependencies
      shell: bash
      run: |
          sudo apt-get update -qq \
          && umask 0002 \
          && sudo apt-get install -y ca-certificates jq zip curl unzip wget apt-transport-https lsb-release gnupg

    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
      with:
          version: 2
          verbose: false
          arch: amd64   

    - name: Set AWS credentials for different branches
      if: github.ref != 'refs/heads/master' # For all branches except master
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

    - name: Set AWS credentials for master branch
      if: github.ref == 'refs/heads/master' # Only for master branch
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

    - name: Get AWS secrets From AWS Secret Manager
      env:
          ASM_NAME: ${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}
      run: |
          export SECRET_JSON=$(aws secretsmanager get-secret-value --region ap-south-1 --secret-id $ASM_NAME --query SecretString --output text)
          echo "APP_NAME=$(echo $SECRET_JSON | jq -r .APP_NAME)" >> .env
          echo "HOST=$(echo $SECRET_JSON | jq -r .HOST)" >> .env                                
          echo "PORT=$(echo $SECRET_JSON | jq -r .PORT)" >> .env
          echo "DATABASE_URI=$(echo $SECRET_JSON | jq -r .DATABASE_URI)" >> .env          
          echo "JWT_ACCESS_TOKEN_SECRET_PRIVATE=$(echo $SECRET_JSON | jq -r .JWT_ACCESS_TOKEN_SECRET_PRIVATE)" >> .env          
          echo "JWT_ACCESS_TOKEN_SECRET_PUBLIC=$(echo $SECRET_JSON | jq -r .JWT_ACCESS_TOKEN_SECRET_PUBLIC)" >> .env          
          echo "JWT_ACCESS_TOKEN_EXPIRATION_MINUTES=$(echo $SECRET_JSON | jq -r .JWT_ACCESS_TOKEN_EXPIRATION_MINUTES)" >> .env          
          echo "REFRESH_TOKEN_EXPIRATION_DAYS=$(echo $SECRET_JSON | jq -r .REFRESH_TOKEN_EXPIRATION_DAYS)" >> .env          
          echo "VERIFY_EMAIL_TOKEN_EXPIRATION_MINUTES=$(echo $SECRET_JSON | jq -r .VERIFY_EMAIL_TOKEN_EXPIRATION_MINUTES)" >> .env          
          echo "RESET_PASSWORD_TOKEN_EXPIRATION_MINUTES=$(echo $SECRET_JSON | jq -r .RESET_PASSWORD_TOKEN_EXPIRATION_MINUTES)" >> .env          
          echo "SMTP_HOST=$(echo $SECRET_JSON | jq -r .SMTP_HOST)" >> .env          
          echo "SMTP_PORT=$(echo $SECRET_JSON | jq -r .SMTP_PORT)" >> .env          
          echo "SMTP_USERNAME=$(echo $SECRET_JSON | jq -r .SMTP_USERNAME)" >> .env          
          echo "SMTP_PASSWORD=$(echo $SECRET_JSON | jq -r .SMTP_PASSWORD)" >> .env          
          echo "EMAIL_FROM=$(echo $SECRET_JSON | jq -r .EMAIL_FROM)" >> .env          
          echo "FRONTEND_URL=$(echo $SECRET_JSON | jq -r .FRONTEND_URL)" >> .env          
          echo "IMAGE_URL=$(echo $SECRET_JSON | jq -r .IMAGE_URL)" >> .env          

    # Install dependencies and build
    - name: Install Dependencies
      run: npm ci

    # - name: Run Tests
    #   run: npm test

    # Step 5: Conditionally Build
    - name: Build Application (if required)
      run: |
        if [ -f tsconfig.json ] || [ -f webpack.config.js ]; then
          npm run build
        else
          echo "No build step required."
        fi

    # Log in to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build  -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG

    # # Run Trivy Scan
    # - name: Run Trivy Vulnerability Scan
    #   uses: aquasecurity/trivy-action@0.28.0
    #   with:
    #     image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
    #     format: 'table'
    #     exit-code: '1'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'

